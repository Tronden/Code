import random
import numpy as np
import matplotlib.pyplot as plt

# Control system parameters
target_response = 8 # Target response

# Genetic Algorithm parameters
POPULATION_SIZE = 100
MUTATION_RATE = 0.1
CROSSOVER_PROBABILITY = 0.8
MAX_GENERATIONS = 20

# Function to generate an individual with random PID controller parameters
def generate_individual():
    return [random.uniform(0, 10) for _ in range(3)]  # Kp, Ki, Kd

# Function to generate the initial population
def generate_population():
    return [generate_individual() for _ in range(POPULATION_SIZE)]

# Function to calculate fitness based on the squared error between the target and actual response
def calculate_fitness(individual):
    Kp, Ki, Kd = individual
    # Simulate system response (simplified)
    response = Kp + Ki + Kd
    squared_error = (target_response - response) ** 2
    return 1 / (1 + squared_error)  # Inverse proportion to squared error

# Function for tournament selection
def select_individual(population):
    tournament_size = 5
    tournament = random.sample(population, tournament_size)
    return max(tournament, key=calculate_fitness)

# Function for single-point crossover
def crossover(parent1, parent2):
    if random.random() < CROSSOVER_PROBABILITY:
        crossover_point = random.randint(0, len(parent1))
        child = parent1[:crossover_point] + parent2[crossover_point:]
        return child
    else:
        return parent1

# Function for mutation
def mutate(individual):
    mutated_individual = individual[:]
    for i in range(len(mutated_individual)):
        if random.random() < MUTATION_RATE:
            mutated_individual[i] += random.uniform(-0.1, 0.1)  # Random change
            mutated_individual[i] = max(0, min(10, mutated_individual[i]))  # Applying constraints
    return mutated_individual

# Genetic algorithm function
def genetic_algorithm():
    population = generate_population()
    best_responses = []
    best_individual = None
    for generation in range(MAX_GENERATIONS):
        fitness_scores = [calculate_fitness(individual) for individual in population]
        best_fitness = max(fitness_scores)
        best_fit_index = fitness_scores.index(best_fitness)
        best_fit_individual = population[best_fit_index]
        if best_individual is None or calculate_fitness(best_individual) < best_fitness:
            best_individual = best_fit_individual
        best_response = sum(best_individual)
        best_responses.append(best_response)
        selected_population = [select_individual(population) for _ in range(POPULATION_SIZE)]
        population = [crossover(selected_population[i], selected_population[i+1]) for i in range(0, POPULATION_SIZE, 2)]
        population = [mutate(individual) for individual in population]
        print(f"Generation {generation}: Best fitness = {best_fitness}, Best individual = {best_individual}")
    print(f"Optimization completed. Best individual: {best_individual}, Best response: {sum(best_individual)}")
    return best_responses

# Run the genetic algorithm
best_responses = genetic_algorithm()

# Plotting the convergence curve
generations = range(len(best_responses))
plt.plot(generations, [target_response] * len(generations), label='Target Response', linestyle='--')
plt.plot(generations, best_responses, label='Best Response', marker='o')
plt.xlabel('Generation')
plt.ylabel('Response')
plt.title('Genetic Algorithm Convergence')
plt.legend()
plt.grid(True)
plt.show()